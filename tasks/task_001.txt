# Task ID: 1
# Title: Create Dependency Injection Framework
# Status: pending
# Dependencies: None
# Priority: high
# Description: Implement a dependency injection framework to decouple components and improve testability
# Details:
Create a DI container class that will manage component registration and resolution. Implement methods for registering components, resolving dependencies, and managing lifecycle. Use Python's typing system to ensure type safety.

Example implementation:
```python
from typing import Any, Dict, Type, TypeVar, cast

T = TypeVar('T')

class DIContainer:
    def __init__(self):
        self._services: Dict[Type, Any] = {}

    def register(self, interface_type: Type[T], implementation: T) -> None:
        self._services[interface_type] = implementation

    def resolve(self, interface_type: Type[T]) -> T:
        if interface_type not in self._services:
            raise KeyError(f"No implementation registered for {interface_type.__name__}")
        return cast(T, self._services[interface_type])
```

Ensure the container supports singleton and transient lifetimes for services.

# Test Strategy:
Create unit tests for the DI container, testing registration, resolution, and error cases. Verify that circular dependencies are detected and proper error messages are shown. Test both singleton and transient service lifetimes.
