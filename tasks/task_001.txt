# Task ID: 1
# Title: Create Environment Manager Protocol Interface
# Status: done
# Dependencies: None
# Priority: high
# Description: Define a protocol-based interface that specifies common operations for all environment managers
# Details:
Create a Python protocol class that defines the interface for all environment managers. This should include methods for:
- Detecting if the environment manager is used in the project
- Building commands with proper environment context
- Executing commands within the environment
- Activating/deactivating environments

Example implementation:
```python
from typing import Protocol, List, Optional
from pathlib import Path

class EnvironmentManager(Protocol):
    @classmethod
    def detect(cls, project_path: Path) -> bool:
        """Detect if this environment manager is used in the project"""
        ...

    def build_command(self, command: List[str]) -> List[str]:
        """Build a command with proper environment context"""
        ...

    def execute_command(self, command: List[str]) -> int:
        """Execute a command within the environment"""
        ...

    def activate(self) -> None:
        """Activate the environment"""
        ...

    def deactivate(self) -> None:
        """Deactivate the environment"""
        ...
```

# Test Strategy:
Create unit tests for the protocol interface to ensure it defines all required methods. Use mypy to verify type checking works correctly with the protocol. Test with mock implementations to ensure the protocol can be properly implemented.
