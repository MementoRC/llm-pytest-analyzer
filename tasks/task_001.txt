# Task ID: 1
# Title: Create New Directory Structure for DDD Architecture
# Status: done
# Dependencies: None
# Priority: high
# Description: Implement the new Domain-Driven Design directory structure as specified in the PRD, creating the domain, infrastructure, application, interfaces, and cross-cutting layers.
# Details:
Create the following directory structure:

```
src/pytest_analyzer/core/
├── domain/
│   ├── entities/           # Core business objects (PytestFailure, FixSuggestion)
│   ├── services/           # Domain services (FailureAnalyzer, FixSuggester)
│   ├── repositories/       # Data access abstractions
│   └── value_objects/      # Immutable domain concepts
├── infrastructure/
│   ├── llm/               # External LLM service integrations
│   ├── environment/       # Environment manager implementations
│   ├── extraction/        # Report parsing implementations
│   ├── di/               # Dependency injection container
│   └── persistence/       # File system, caching implementations
├── application/
│   ├── services/          # Application services (AnalyzerService)
│   ├── workflows/         # State machines and orchestration
│   └── facades/           # Public API facades
├── interfaces/
│   ├── protocols.py       # All protocol definitions
│   ├── errors.py          # Exception definitions
│   └── types.py           # Type definitions
└── cross_cutting/
    ├── logging/            # Centralized logging configuration
    ├── monitoring/         # Health checks and metrics
    ├── caching/           # Result caching strategies
    ├── validation/        # Input/output validation
    └── configuration/     # Configuration management
```

Ensure all directories have proper `__init__.py` files to maintain package structure. Create placeholder README.md files in each directory explaining its purpose according to DDD principles.

# Test Strategy:
Verify directory structure exists with correct hierarchy. Ensure all __init__.py files are properly created. Validate import paths work correctly by attempting to import from each new module.
