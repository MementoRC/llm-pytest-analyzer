# Task ID: 4
# Title: Implement CLI Integration for MCP Server
# Status: done
# Dependencies: 3
# Priority: high
# Description: Extend the existing CLI interface to support starting and configuring the MCP server.
# Details:
Extend the CLI module to add MCP server commands:
1. Add `mcp-server` subcommand to the main CLI entrypoint
2. Implement options for transport selection (--stdio, --http)
3. Add port and host configuration for HTTP transport
4. Include help text and documentation
5. Implement graceful shutdown handling

Example implementation:
```python
@click.group(name="mcp-server")
def mcp_server_group():
    """Start and manage the MCP server for AI assistant integration."""
    pass

@mcp_server_group.command(name="start")
@click.option("--stdio", is_flag=True, help="Use STDIO transport (default)")
@click.option("--http", is_flag=True, help="Use HTTP transport")
@click.option("--port", default=8000, help="Port for HTTP transport")
@click.option("--host", default="127.0.0.1", help="Host for HTTP transport")
def start_server(stdio, http, port, host):
    """Start the MCP server with specified transport."""
    # Implementation

# Register with main CLI
main_cli.add_command(mcp_server_group)
```

Ensure proper signal handling for graceful shutdown (SIGINT, SIGTERM).

# Test Strategy:
Test CLI command registration and help text. Verify command-line arguments are correctly parsed. Test server startup with different transport options. Check signal handling for proper shutdown. Integration test with actual server instance.
