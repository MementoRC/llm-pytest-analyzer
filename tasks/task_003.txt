# Task ID: 3
# Title: Implement BaseFactory Abstract Class
# Status: done
# Dependencies: 1
# Priority: high
# Description: Create a base factory class to consolidate repeated factory initialization patterns across extractor, LLM, and suggester factories.
# Details:
Create `src/pytest_analyzer/core/infrastructure/base_factory.py` with the following implementation:

```python
from abc import ABC, abstractmethod
from typing import Optional, Dict, Any, Type, TypeVar
import logging
from pathlib import Path

# Import the Settings class from the appropriate location
from pytest_analyzer.core.cross_cutting.configuration.settings import Settings

T = TypeVar('T')

class BaseFactory(ABC):
    """Base factory class to eliminate duplication across factory implementations."""
    
    def __init__(self, settings: Optional[Settings] = None):
        self.settings = settings or Settings()
        self.logger = logging.getLogger(self.__class__.__name__)
        self._registry: Dict[str, Type[T]] = {}
    
    def register(self, key: str, implementation: Type[T]) -> None:
        """Register an implementation with a specific key."""
        self.logger.debug(f"Registering {implementation.__name__} with key '{key}'")
        self._registry[key] = implementation
    
    def get_implementation(self, key: str) -> Type[T]:
        """Get the implementation for a specific key."""
        if key not in self._registry:
            self.logger.error(f"No implementation registered for key '{key}'")
            raise KeyError(f"No implementation registered for key '{key}'")
        return self._registry[key]
    
    def _detect_file_type(self, file_path: str) -> str:
        """Common file detection logic based on file extension or content."""
        path = Path(file_path)
        return path.suffix.lower()[1:] if path.suffix else ""
    
    @abstractmethod
    def create(self, *args, **kwargs) -> T:
        """Create an instance of the appropriate implementation."""
        pass
```

This base factory consolidates common patterns identified in the PRD from existing factory implementations.

# Test Strategy:
Create unit tests for BaseFactory that verify:
1. Constructor properly initializes settings and logger
2. register method adds implementations to the registry
3. get_implementation returns the correct implementation or raises KeyError
4. _detect_file_type correctly extracts file extensions
5. Attempting to instantiate the abstract class directly raises TypeError
6. Subclassing without implementing create raises TypeError
