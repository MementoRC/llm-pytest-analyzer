# Task ID: 3
# Title: Implement MCP Server Base Class
# Status: pending
# Dependencies: 1, 2
# Priority: high
# Description: Create the core MCP server implementation that will handle protocol communication and tool registration.
# Details:
In `src/pytest_analyzer/mcp/server.py`, implement:
1. `MCPServer` class that initializes the MCP protocol handler
2. Methods for registering tools and resources
3. Transport configuration (STDIO and HTTP)
4. Server lifecycle management (start, stop)
5. Error handling and logging integration

Implementation should:
- Use the MCP Python SDK for protocol handling
- Support both STDIO and HTTP transports
- Integrate with existing logging system
- Handle graceful shutdown
- Support dependency injection pattern

Example structure:
```python
from mcp_python_sdk import MCPProtocolHandler, Transport
from pytest_analyzer.core.logging import get_logger

class MCPServer:
    def __init__(self, transport_type="stdio", host="127.0.0.1", port=8000):
        self.logger = get_logger(__name__)
        self.transport_type = transport_type
        self.host = host
        self.port = port
        self.protocol_handler = MCPProtocolHandler()
        self.tools = {}

    def register_tool(self, tool_name, tool_function, schema):
        # Implementation

    def start(self):
        # Implementation

    def stop(self):
        # Implementation
```

# Test Strategy:
Unit test the MCPServer class with mock protocol handler. Test server initialization with different transport configurations. Verify tool registration works correctly. Test server start/stop lifecycle. Verify error handling for invalid configurations.
