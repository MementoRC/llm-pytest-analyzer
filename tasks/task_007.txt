# Task ID: 7
# Title: Implement Facade Integration Pattern
# Status: pending
# Dependencies: 3, 5, 6
# Priority: high
# Description: Create a thin facade layer over the existing PytestAnalyzerFacade to maintain consistency with the current CLI interface.
# Details:
Implement an MCP-specific facade that delegates to the existing PytestAnalyzerFacade:
1. Create `src/pytest_analyzer/mcp/facade.py`
2. Implement `MCPAnalyzerFacade` class that wraps the existing facade
3. Add methods corresponding to MCP tools
4. Ensure consistent error handling and logging
5. Maintain dependency injection pattern

Example implementation:
```python
from pytest_analyzer.core.facade import PytestAnalyzerFacade
from pytest_analyzer.core.logging import get_logger
from pytest_analyzer.mcp.schemas import *

class MCPAnalyzerFacade:
    def __init__(self, analyzer_facade: PytestAnalyzerFacade):
        self.analyzer_facade = analyzer_facade
        self.logger = get_logger(__name__)
    
    async def analyze_pytest_output(self, request: AnalyzePytestOutputRequest) -> AnalyzePytestOutputResponse:
        try:
            self.logger.info(f"Analyzing pytest output from {request.file_path}")
            result = self.analyzer_facade.analyze_file(request.file_path)
            return AnalyzePytestOutputResponse(
                suggestions=[
                    FixSuggestion(**suggestion) for suggestion in result.suggestions
                ],
                execution_time_ms=result.execution_time_ms
            )
        except Exception as e:
            self.logger.error(f"Error analyzing pytest output: {str(e)}")
            raise
```

Ensure all facade methods are properly documented and follow existing patterns.

# Test Strategy:
Unit test facade with mock analyzer facade. Verify correct delegation to underlying facade methods. Test error handling and propagation. Check logging integration. Verify input/output transformation between facades.
