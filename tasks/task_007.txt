# Task ID: 7
# Title: Implement CLI Flags for Environment Manager Override
# Status: in-progress
# Dependencies: 5, 6
# Priority: medium
# Description: Add command-line flags to allow users to override the environment manager detection
# Details:
Extend the CLI argument parsing to support environment manager override flags:

```python
import argparse
from pathlib import Path

class CLIParser:
    def __init__(self):
        self.parser = argparse.ArgumentParser(description="pytest-analyzer CLI")
        self._configure_parser()

    def _configure_parser(self) -> None:
        """Configure the argument parser"""
        # Existing arguments...

        # Add environment manager group
        env_group = self.parser.add_argument_group("Environment Manager")
        env_group.add_argument(
            "--env-manager",
            choices=["auto", "pixi", "poetry", "hatch", "uv", "pipenv", "pip+venv"],
            default="auto",
            help="Specify the environment manager to use (default: auto-detect)"
        )

    def parse(self, args=None):
        """Parse command-line arguments"""
        return self.parser.parse_args(args)
```

Update the CLI module to use these flags:

```python
class CLI:
    def __init__(self):
        self.detector = EnvironmentManagerDetector()
        self.config = Configuration()
        self.parser = CLIParser()
        self.current_manager: Optional[EnvironmentManager] = None

    def run(self, args=None) -> int:
        """Run the CLI with the given arguments"""
        parsed_args = self.parser.parse(args)
        project_path = Path(parsed_args.project_path or ".").absolute()

        # Load configuration
        self.config.load(project_path)

        # Determine environment manager
        if parsed_args.env_manager != "auto":
            # CLI flag takes highest priority
            self.current_manager = self._get_manager_by_name(parsed_args.env_manager, project_path)
        else:
            # Check config override
            override = self.config.get_environment_manager_override()
            if override:
                self.current_manager = self._get_manager_by_name(override, project_path)
            else:
                # Auto-detect
                self.current_manager = self.detector.detect(project_path)

        # Execute the command
        command = self._build_command(parsed_args)
        if self.current_manager:
            return self.current_manager.execute_command(command)
        else:
            # Fall back to direct execution
            import subprocess
            return subprocess.call(command, cwd=project_path)
```

# Test Strategy:
Create unit tests for the CLI parser with various argument combinations. Test that environment manager flags are correctly parsed. Test integration with the CLI module to ensure flag-based overrides take precedence over configuration-based overrides.
