# Task ID: 7
# Title: Migrate Remaining Environment Managers to Base Class
# Status: done
# Dependencies: 2, 6
# Priority: medium
# Description: Refactor Pixi, Hatch, UV, and Pipenv environment managers to inherit from BaseEnvironmentManager.
# Details:
Refactor the remaining environment managers following the same pattern as PoetryEnvironmentManager:

1. For PixiEnvironmentManager:
```python
from pathlib import Path
from typing import List

from pytest_analyzer.core.infrastructure.environment.base_manager import BaseEnvironmentManager
from pytest_analyzer.core.cross_cutting.error_handling import error_context

class PixiEnvironmentManager(BaseEnvironmentManager):
    """Pixi-specific environment manager implementation."""

    def __init__(self, project_path: Path):
        super().__init__(project_path)
        self.pixi_executable = "pixi"

    def build_command(self, base_command: List[str]) -> List[str]:
        """Build a Pixi-specific command to run the given base command."""
        with error_context("Building Pixi command", self.logger):
            return [self.pixi_executable, "run"] + base_command
```

2. For HatchEnvironmentManager:
```python
from pathlib import Path
from typing import List

from pytest_analyzer.core.infrastructure.environment.base_manager import BaseEnvironmentManager
from pytest_analyzer.core.cross_cutting.error_handling import error_context

class HatchEnvironmentManager(BaseEnvironmentManager):
    """Hatch-specific environment manager implementation."""

    def __init__(self, project_path: Path):
        super().__init__(project_path)
        self.hatch_executable = "hatch"

    def build_command(self, base_command: List[str]) -> List[str]:
        """Build a Hatch-specific command to run the given base command."""
        with error_context("Building Hatch command", self.logger):
            return [self.hatch_executable, "run"] + base_command
```

3. For UVEnvironmentManager and PipenvEnvironmentManager, follow the same pattern.

Ensure each manager only implements the methods that differ from the base class implementation.

# Test Strategy:
For each environment manager, create unit tests that verify:
1. build_command correctly prepends the appropriate executable and commands
2. Inherited methods from BaseEnvironmentManager work correctly
3. Integration test that verifies the manager can execute real commands in the appropriate environment
4. Error handling works correctly when invalid commands are provided
5. Verify that the refactored managers maintain the same behavior as the original implementations
