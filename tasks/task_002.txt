# Task ID: 2
# Title: Implement Environment Manager Detection Service
# Status: done
# Dependencies: 1
# Priority: high
# Description: Create a service that detects which environment manager is being used in a project based on project files
# Details:
Implement a detection service that examines project files to determine which environment manager is in use:

```python
from pathlib import Path
from typing import Optional, Type, List
import toml

from .protocol import EnvironmentManager
from .managers import PixiManager, PoetryManager, HatchManager, UVManager, PipenvManager, PipVenvManager

class EnvironmentManagerDetector:
    def __init__(self):
        self._managers: List[Type[EnvironmentManager]] = [
            PixiManager,
            PoetryManager,
            HatchManager,
            UVManager,
            PipenvManager,
            PipVenvManager
        ]
        self._cache = {}

    def detect(self, project_path: Path) -> Optional[EnvironmentManager]:
        """Detect and return the appropriate environment manager for the project"""
        # Check cache first
        if project_path in self._cache:
            return self._cache[project_path]

        # Try each manager
        for manager_cls in self._managers:
            if manager_cls.detect(project_path):
                manager = manager_cls(project_path)
                self._cache[project_path] = manager
                return manager

        return None
```

Ensure the detection logic follows the specified rules in the PRD:
- Pixi: Check for pixi.toml file
- Poetry: Check for pyproject.toml with [tool.poetry] section
- Hatch: Check for pyproject.toml with [tool.hatch] section
- UV: Check for uv.lock file or pyproject.toml with UV configuration
- Pipenv: Check for Pipfile or Pipfile.lock
- Pip+Venv: Check for requirements.txt with virtual environment

# Test Strategy:
Create unit tests with mock file systems to test detection of each environment manager. Include tests for edge cases like multiple environment managers present, no environment managers, and invalid configurations. Test caching behavior to ensure it works correctly.
