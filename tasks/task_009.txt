# Task ID: 9
# Title: Migrate ExtractorFactory to Use BaseFactory
# Status: pending
# Dependencies: 3
# Priority: medium
# Description: Refactor the ExtractorFactory to inherit from BaseFactory and eliminate duplicated code.
# Details:
Refactor `src/pytest_analyzer/core/infrastructure/extraction/extractor_factory.py` to use the new base class:

```python
from typing import Type, Optional
from pathlib import Path

from pytest_analyzer.core.infrastructure.base_factory import BaseFactory
from pytest_analyzer.core.interfaces.protocols import Extractor
from pytest_analyzer.core.infrastructure.extraction.json_extractor import JSONExtractor
from pytest_analyzer.core.infrastructure.extraction.xml_extractor import XMLExtractor
from pytest_analyzer.core.infrastructure.extraction.text_extractor import TextExtractor
from pytest_analyzer.core.cross_cutting.configuration.settings import Settings
from pytest_analyzer.core.cross_cutting.error_handling import error_context

class ExtractorFactory(BaseFactory):
    """Factory for creating extractors based on file type."""
    
    def __init__(self, settings: Optional[Settings] = None):
        super().__init__(settings)
        self._register_default_extractors()
    
    def _register_default_extractors(self) -> None:
        """Register the default extractors."""
        self.register("json", JSONExtractor)
        self.register("xml", XMLExtractor)
        self.register("txt", TextExtractor)
    
    def create(self, file_path: str) -> Extractor:
        """Create an extractor for the given file path.
        
        Args:
            file_path: Path to the file to extract from
            
        Returns:
            An instance of the appropriate extractor
        """
        with error_context("Creating extractor", self.logger):
            file_type = self._detect_file_type(file_path)
            extractor_class = self.get_implementation(file_type)
            return extractor_class()
```

This refactored factory uses the BaseFactory to eliminate code duplication while providing extractor-specific functionality.

# Test Strategy:
Create unit tests for ExtractorFactory that verify:
1. _register_default_extractors correctly registers all extractors
2. create returns the correct extractor type based on file extension
3. Integration test with different file types to verify correct extractor is created
4. Error handling for unsupported file types
5. Verify that the refactored factory maintains the same behavior as the original implementation
