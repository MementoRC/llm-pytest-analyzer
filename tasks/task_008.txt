# Task ID: 8
# Title: Implement EnvironmentManagerFactory Using BaseFactory
# Status: pending
# Dependencies: 3, 6, 7
# Priority: medium
# Description: Create an EnvironmentManagerFactory that inherits from BaseFactory to create the appropriate environment manager based on project configuration.
# Details:
Create `src/pytest_analyzer/core/infrastructure/environment/environment_manager_factory.py` with the following implementation:

```python
from pathlib import Path
from typing import Type, Optional, Dict

from pytest_analyzer.core.infrastructure.base_factory import BaseFactory
from pytest_analyzer.core.infrastructure.environment.base_manager import BaseEnvironmentManager
from pytest_analyzer.core.infrastructure.environment.poetry_manager import PoetryEnvironmentManager
from pytest_analyzer.core.infrastructure.environment.pixi_manager import PixiEnvironmentManager
from pytest_analyzer.core.infrastructure.environment.hatch_manager import HatchEnvironmentManager
from pytest_analyzer.core.infrastructure.environment.uv_manager import UVEnvironmentManager
from pytest_analyzer.core.infrastructure.environment.pipenv_manager import PipenvEnvironmentManager
from pytest_analyzer.core.cross_cutting.configuration.settings import Settings
from pytest_analyzer.core.cross_cutting.error_handling import error_context

class EnvironmentManagerFactory(BaseFactory):
    """Factory for creating environment managers based on project configuration."""
    
    def __init__(self, settings: Optional[Settings] = None):
        super().__init__(settings)
        self._register_default_managers()
    
    def _register_default_managers(self) -> None:
        """Register the default environment managers."""
        self.register("poetry", PoetryEnvironmentManager)
        self.register("pixi", PixiEnvironmentManager)
        self.register("hatch", HatchEnvironmentManager)
        self.register("uv", UVEnvironmentManager)
        self.register("pipenv", PipenvEnvironmentManager)
    
    def create(self, project_path: Path, manager_type: Optional[str] = None) -> BaseEnvironmentManager:
        """Create an environment manager for the given project path.
        
        Args:
            project_path: Path to the project directory
            manager_type: Type of manager to create, or None to auto-detect
            
        Returns:
            An instance of the appropriate environment manager
        """
        with error_context("Creating environment manager", self.logger):
            if manager_type is None:
                manager_type = self._detect_environment_type(project_path)
            
            manager_class = self.get_implementation(manager_type)
            return manager_class(project_path)
    
    def _detect_environment_type(self, project_path: Path) -> str:
        """Detect the environment type based on project files."""
        detection_files = {
            "poetry": "pyproject.toml",  # Look for poetry section
            "pixi": "pixi.toml",
            "hatch": "pyproject.toml",  # Look for hatch section
            "pipenv": "Pipfile",
            "uv": "pyproject.toml"  # Look for uv section
        }
        
        # Check for pyproject.toml first and determine the tool
        if (project_path / "pyproject.toml").exists():
            # Read the file and check for tool sections
            with open(project_path / "pyproject.toml", "r") as f:
                content = f.read()
                if "[tool.poetry]" in content:
                    return "poetry"
                elif "[tool.hatch]" in content:
                    return "hatch"
                elif "[tool.uv]" in content:
                    return "uv"
        
        # Check for other files
        for env_type, filename in detection_files.items():
            if (project_path / filename).exists():
                return env_type
        
        # Default to poetry if nothing else is detected
        self.logger.warning(f"Could not detect environment type for {project_path}, defaulting to poetry")
        return "poetry"
```

This factory uses the BaseFactory to eliminate code duplication while providing environment manager-specific functionality.

# Test Strategy:
Create unit tests for EnvironmentManagerFactory that verify:
1. _register_default_managers correctly registers all environment managers
2. create returns the correct manager type when explicitly specified
3. _detect_environment_type correctly identifies environment types based on project files
4. Integration test with different project structures to verify auto-detection works
5. Error handling for invalid manager types
