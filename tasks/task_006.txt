# Task ID: 6
# Title: Migrate PoetryEnvironmentManager to Use Base Class
# Status: pending
# Dependencies: 2
# Priority: medium
# Description: Refactor the PoetryEnvironmentManager to inherit from BaseEnvironmentManager and eliminate duplicated code.
# Details:
Refactor `src/pytest_analyzer/core/infrastructure/environment/poetry_manager.py` to use the new base class:

```python
from pathlib import Path
from typing import List

# Import from the new structure
from pytest_analyzer.core.infrastructure.environment.base_manager import BaseEnvironmentManager
from pytest_analyzer.core.cross_cutting.error_handling import error_context

class PoetryEnvironmentManager(BaseEnvironmentManager):
    """Poetry-specific environment manager implementation."""

    def __init__(self, project_path: Path):
        super().__init__(project_path)
        self.poetry_executable = "poetry"

    def build_command(self, base_command: List[str]) -> List[str]:
        """Build a Poetry-specific command to run the given base command."""
        with error_context("Building Poetry command", self.logger):
            return [self.poetry_executable, "run"] + base_command

    # Only implement methods that differ from the base class
    # activate and deactivate can use the base class no-op implementations
    # execute_command can use the base class implementation
```

Repeat this pattern for other environment managers (Pixi, Hatch, UV, Pipenv) to eliminate code duplication while preserving specific behavior for each manager.

# Test Strategy:
Create unit tests for PoetryEnvironmentManager that verify:
1. build_command correctly prepends 'poetry run' to commands
2. Inherited methods from BaseEnvironmentManager work correctly
3. Integration test that verifies the manager can execute real commands in a Poetry environment
4. Error handling works correctly when invalid commands are provided
