# Task ID: 5
# Title: Implement MCP Configuration Integration
# Status: done
# Dependencies: 3
# Priority: high
# Description: Integrate MCP server settings with the existing configuration system.
# Details:
Extend the existing Settings class to include MCP configuration:
1. Add MCP-specific settings to the Settings class
2. Implement environment variable support
3. Add configuration file integration
4. Implement validation for MCP settings

Settings should include:
- Server transport method
- Port and host for HTTP transport
- Security settings
- Tool enablement flags
- Resource constraints

Example implementation:
```python
class MCPSettings(BaseSettings):
    transport_type: str = "stdio"
    http_host: str = "127.0.0.1"
    http_port: int = 8000
    max_request_size_mb: int = 10
    enable_authentication: bool = False
    auth_token: Optional[str] = None
    tool_timeout_seconds: int = 30
    
    @validator("transport_type")
    def validate_transport(cls, v):
        if v not in ["stdio", "http"]:
            raise ValueError("Transport must be 'stdio' or 'http'")
        return v

# Extend main settings
class Settings(BaseSettings):
    # Existing settings...
    mcp: MCPSettings = MCPSettings()
```

Ensure settings can be loaded from environment variables with prefix `PYTEST_ANALYZER_MCP_`.

# Test Strategy:
Unit test settings initialization with default values. Test loading settings from environment variables. Verify validation logic for invalid settings. Test integration with existing settings system. Check configuration file loading.
