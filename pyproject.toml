[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "pytest-analyzer"
dynamic = ["version"]
description = "Analyzes pytest test results to identify patterns and suggest fixes."
readme = "README.md"
requires-python = ">=3.9"
license = { text = "MIT" }
authors = [
    { name = "Memento", email = "claude.rc@gmail.com" },
]
keywords = ["pytest", "testing", "analysis", "reporting", "debugging"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Framework :: Pytest",
    "Topic :: Software Development :: Testing",
    "Topic :: Software Development :: Quality Assurance",
]

dependencies = [
    "anthropic",
    "openai",
    "pyyaml",
    "rich>=12.0.0",
    "PyQt6>=6.5.0",
]

[project.optional-dependencies]
dev = [
    "clang-format",
    "isort",
    "mkdocs",
    "mypy",
    "pre-commit",
    "pre-commit-hooks",
    "pytest>=7.0.0",
    "pytest-asyncio",
    "pytest-cov",
    "pytest-json-report>=1.5.0",
    "pytest-qt>=4.2.0",
    "ruff==0.11.10",
    "types-pyyaml",
]

test = [
    "pytest>=7.0.0",
    "pytest-asyncio",
    "pytest-cov",
    "pytest-json-report>=1.5.0",
    "pytest-qt>=4.2.0",
]

[project.scripts]
pytest-analyzer = "pytest_analyzer.cli.analyzer_cli:main"
pytest-analyzer-gui = "pytest_analyzer.gui.__main__:main"

[project.urls]
Homepage = "https://github.com/yourusername/pytest_analyzer"
Repository = "https://github.com/yourusername/pytest_analyzer"
Issues = "https://github.com/yourusername/pytest_analyzer/issues"

[tool.hatch.version]
path = "src/pytest_analyzer/__version__.py"

[tool.pytest.ini_options]
testpaths = ["tests"]
asyncio_default_fixture_loop_scope = "function"
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
pythonpath = ["src"]
log_cli = true
log_cli_level = "INFO"
filterwarnings = ["ignore::DeprecationWarning", "ignore::pytest.PytestDeprecationWarning"]
addopts = "--quiet --cov=src/pytest_analyzer --cov-report=term-missing"
markers = [
    "e2e: mark test as an end-to-end test",
    "gui: mark test as a GUI test that requires a display",
]

[tool.mypy]
mypy_path = ["src"]
namespace_packages = true
explicit_package_bases = true
exclude = ["examples/*", "demo_script.py"]
python_version = "3.9"
packages = ["pytest_analyzer"]
ignore_errors = false

[[tool.mypy.overrides]]
module = ["anthropic.*", "openai.*"]
ignore_missing_imports = true

[tool.pixi.project]
channels = ["conda-forge"]
platforms = ["linux-64"]

[tool.pixi.dependencies]
"pyyaml" = "*"
"rich" = ">=12.0.0"

[tool.pixi.pypi-dependencies]
# pytest-analyzer = { path = ".", editable = true }

[tool.pixi.environments]
default = { solve-group = "default" }
dev = { features = ["dev"], solve-group = "default" }
test = { features = ["test"], solve-group = "default" }

[tool.ruff]
# Target Python version
target-version = "py39"
# Line length - this applies to both linting and formatting
line-length = 100
# Additional exclusions
extend-exclude = ["*.md", "docs"]
# Force exclude to be respected even when files are passed directly
force-exclude = true

[tool.ruff.lint]
# Enable necessary checks and rules with comments for clarity
select = [
    "E",    # pycodestyle errors
    "F",    # pyflakes
    "I",    # isort
    "W",    # pycodestyle warnings
    "UP",   # pyupgrade
    "N",    # pep8-naming
    "B",    # flake8-bugbear
    "A",    # flake8-builtins
    "C4",   # flake8-comprehensions
    "ISC",  # flake8-implicit-str-concat
    "NPY",  # NumPy-specific rules
    "PD",   # pandas-specific rules
    "PT",   # flake8-pytest-style
    "RET",  # flake8-return
    "SIM",  # flake8-simplify
    "TCH",  # flake8-type-checking
]

# Ignore specific errors
ignore = [
    "E203",    # Whitespace before ':' (Black formats this differently)
    "E501",    # Line too long - for now, allow longer lines
    "UP006",   # Use built-in type hints - allow for compatibility with older Python
    "UP035",   # Import from typing deprecated - allow for compatibility with older Python
    "SIM117",  # Use a single with statement - may reduce readability in some cases
    "SIM102",  # Use a single if statement instead of nested if - may reduce readability
    "SIM105",  # Use contextlib.suppress instead of try-except-pass - may reduce readability
    "SIM108",  # Use ternary instead of if-else block - may reduce readability
    "SIM118",  # Use key in dict instead of key in dict.keys() - may reduce readability
    "A001",    # Variable shadowing a Python builtin
    "A004",    # Shadowing builtin names - for backward compatibility
    "B007",    # Loop control variable not used - often used for clarity
    "B008",    # Do not perform function call in argument defaults - often needed
    "B011",    # Do not assert False - sometimes needed in tests
    "B023",    # Function definition does not bind loop variable - sometimes needed
    "B904",    # Raise from in except clause - for backward compatibility
    "N802",    # Function name should be lowercase - Qt convention uses camelCase
    "PT003",   # Fixture scope=function is implied - explicit is sometimes clearer
    "PT009",   # Use regular assert instead of unittest style - for backward compatibility
    "PT011",   # pytest.raises is too broad - for test flexibility
    "PT015",   # Assertion always fails - sometimes used for test flow control
    "PT017",   # Found assertion on exception in except block - sometimes clearer
    "PT018",   # Break down assertions - may reduce readability in tests
    "PT027",   # Use pytest.raises instead of assertRaises - for backward compatibility
    "RET503",  # Missing explicit return - implicit return is sometimes clearer
    "RET504",  # Unnecessary assignment before return - often used for clarity
]

# Files to exclude from checking
exclude = [
    ".git",
    ".github",
    "__pycache__",
    "build",
    "dist",
    "venv",
    ".venv",
    ".env",
    ".pixi",
    ".pytest_cache",
    ".ruff_cache",
]

[tool.ruff.format]
# Format configuration
quote-style = "double"
indent-style = "space"
# Preserve line breaks with magic trailing comma - this is critical for preserving existing formatting
skip-magic-trailing-comma = false
# Line ending configuration
line-ending = "auto"
# Disable auto-wrapping of long strings/docstrings
docstring-code-format = false
# Don't format docstrings at all to avoid line breaks changes
docstring-code-line-length = 100

# Set to preserve line breaks in long expressions - this applies to both linting and formatting
[tool.ruff.lint.pycodestyle]
ignore-overlong-task-comments = true

[tool.isort]
profile = "black"
line_length = 100
skip_gitignore = true

# Ruff-specific isort settings
[tool.ruff.lint.isort]
# Use the black profile
known-first-party = ["pytest_analyzer"]

[tool.pixi.tasks]
dev = "pip install -e ."
install-editable = "pip install -e ."
lint = "ruff check src tests"
lint-fix = "ruff check --fix src tests"
format = "ruff format src tests"
typecheck = "mypy src"
test = "pytest tests"
test-cov = { cmd = "pytest --cov=src/pytest_analyzer --cov-report=term-missing --cov-report=xml tests", depends-on = ["install-editable"] }
build = { cmd = "hatch build", depends-on = ["install-editable"] }
clean = "rm -rf dist build .ruff_cache .mypy_cache .pytest_cache *.egg-info src/pytest_analyzer.egg-info"
check-all = { depends-on = ["lint", "typecheck", "test"] }
setup-pre-commit = "pre-commit install --install-hooks"
