import logging
from pathlib import Path
from typing import TYPE_CHECKING, List

from pytest_analyzer.core.analyzer_service import PytestAnalyzerService
from pytest_analyzer.core.extraction.extractor_factory import get_extractor
from pytest_analyzer.utils.settings import Settings

if TYPE_CHECKING:
    from pytest_analyzer.core.models.pytest_failure import PytestFailure

# Configure basic logging to see output from the script and the library
logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(levelname)s - %(name)s - %(message)s"
)
logger = logging.getLogger("demo_extraction_gui")


def main():
    logger.info("Starting GUI extraction demonstration script.")

    json_report_path = Path("/tmp/gui_multiple_failures.json")
    logger.info(f"Attempting to load JSON report from: {json_report_path}")

    if not json_report_path.exists():
        logger.error(
            f"JSON report file not found: {json_report_path}. "
            "Please ensure this file exists and contains the test results."
        )
        logger.error(
            "This demo script expects 'gui_multiple_failures.json' to be in /tmp/ "
            "as generated by previous steps or tests."
        )
        return

    try:
        # 1. Initialize Settings.
        #    PytestAnalyzerService would initialize this.
        #    project_root defaults to Path.cwd(), which is fine for absolute /tmp/ paths.
        settings = Settings(project_root=Path.cwd())

        # 2. Instantiate PytestAnalyzerService.
        #    This allows using its configured settings and path_resolver,
        #    simulating how the GUI might interact with the service's context.
        #    LLM client is not needed for extraction.
        service = PytestAnalyzerService(settings=settings, llm_client=None)
        logger.info("PytestAnalyzerService initialized.")

        # 3. Get the appropriate extractor using the service's context.
        #    This is how PytestAnalyzerService itself obtains an extractor.
        extractor = get_extractor(json_report_path, service.settings, service.path_resolver)
        logger.info(f"Extractor obtained for {json_report_path}: {type(extractor).__name__}")

        # 4. Call the extraction method to get PytestFailure objects.
        #    JsonResultExtractor.extract_failures returns List[PytestFailure].
        #    This is the core data the GUI would work with.
        failures: List[PytestFailure] = extractor.extract_failures(json_report_path)
        logger.info(f"Extraction complete. Found {len(failures)} failures.")

        # 5. Print the results in a format showing what the GUI would receive.
        print("\n--- Extracted Test Failures ---")
        if not failures:
            print("No failures were extracted from the report.")
        else:
            print(f"Successfully extracted {len(failures)} failures:")
            for i, failure in enumerate(failures):
                print(f"\nFailure {i + 1}:")
                print(f"  Test Name (nodeid): {failure.test_name}")
                print(f"  Outcome:            {failure.outcome}")
                print(f"  File Path:          {failure.test_file}")
                print(f"  Line Number:        {failure.line_number}")
                print(f"  Error Type:         {failure.error_type}")

                error_message_summary = (
                    (failure.error_message[:150] + "...")
                    if failure.error_message and len(failure.error_message) > 150
                    else failure.error_message
                )
                print(
                    f"  Error Message:      {error_message_summary if error_message_summary else 'N/A'}"
                )
        print("\n--- End of Report ---")

        # Verify that 2 error test failures are extracted
        if len(failures) == 2:
            logger.info(
                "Demonstration successful: Correctly extracted 2 failures from "
                f"'{json_report_path.name}'."
            )
        else:
            logger.warning(
                f"Expected 2 failures, but extracted {len(failures)}. "
                f"Please check the content of '{json_report_path.name}'."
            )

    except Exception as e:
        logger.error(f"An error occurred during the extraction demo: {e}", exc_info=True)


if __name__ == "__main__":
    main()
